{
  "_location": "/@sap/hdbext", 
  "_spec": "@sap/hdbext@^4.3.1", 
  "readmeFilename": "README.md", 
  "keywords": [
    "HDB", 
    "hana", 
    "sap", 
    "sql", 
    "hdi"
  ], 
  "devDependencies": {
    "express": "4.14.0", 
    "proxyquire": "1.7.10", 
    "istanbul": "0.4.4", 
    "supertest": "2.0.0", 
    "filter-node-package": "^2.0.0", 
    "chai": "3.5.0", 
    "mocha": "3.0.2", 
    "sinon": "1.17.5", 
    "eslint": "3.2.2", 
    "node-style": "2.0.0"
  }, 
  "_from": "@sap/hdbext@>=4.3.1 <5.0.0", 
  "_inCache": true, 
  "engines": {
    "node": "^0.12.7 || ^4.4.0 || ^6.0.0"
  }, 
  "_phantomChildren": {}, 
  "_args": [
    [
      {
        "name": "@sap/hdbext", 
        "escapedName": "@sap%2fhdbext", 
        "rawSpec": "^4.3.1", 
        "raw": "@sap/hdbext@^4.3.1", 
        "scope": "@sap", 
        "type": "range", 
        "spec": ">=4.3.1 <5.0.0"
      }, 
      "/data/xmake/prod-build7030/w/final-assembly-xsjs-OD-linuxx86_64_indirectshipment/gen/out/module"
    ]
  ], 
  "_nodeVersion": "6.9.1", 
  "version": "4.3.3", 
  "readme": "@sap/hdbext\n============\n\nThis module provides convenient functions on top of the [hdb][4] module.\n\nThe [change log](CHANGELOG.md) describes notable changes in this package.\n\n## Usage\n\n```js\nvar hdbext = require('@sap/hdbext');\n```\n\n## API\n\n### createConnection(hanaConfig, callback)\n\nCreates a connection to a HANA database:\n\n```js\nvar hanaConfig = {\n  host     : 'hostname',\n  port     : 30015,\n  user     : 'user',\n  password : 'secret'\n};\nhdbext.createConnection(hanaConfig, function(error, client) {\n  if (error) {\n    return console.error(error);\n  }\n\n  client.exec(...);\n});\n```\n\nThe `hanaConfig` argument contains [database connection options](#database-connection-options) and [additional options](#additional-options).\nThe callback provides a connected `client` object (see [hdb][4]).\n\nIf the application will be deployed in Cloud Foundry or XSA, you can use _@sap/xsenv_ package to\nlookup the bound HANA service, like this:\n```js\nvar xsenv = require('@sap/xsenv');\n\nvar hanaConfig = xsenv.cfServiceCredentials({ tag: 'hdb' });\nhdbext.createConnection(hanaConfig, function(error, client) {\n  //...\n});\n```\n\n#### Database connection options\n\nThe HANA options provided to *@sap/hdbext* should be in the same format as expected by the [hdb][5] package.\n\nFor convenience these properties set by the HANA service broker in the SAP HANA XS Advanced platform are also accepted:\n* `db_hosts` - can be used instead of the `hosts` property of the [hdb driver][5].\n* `certificate` - can be used instead of `ca` property of the [hdb driver][6].\n__Note:__ `certificate` is a string containing one certificate, while `ca` is an array of certificates.\n\n#### Additional options\n\nA connection created with *@sap/hdbext* can be further configured with the following options:\n\nOption | Type | Description\n-------- | ---- | -----------\n`schema` | string | Used to set current schema.\n`autoCommit` | boolean | Sets the autoCommit flag. If no option is specified it defaults to `true`\n`isolationLevel` | enum | One of `hdbext.constants.isolation` values. Used to set transaction isolation level.\n`locale` | string | Used to set connection locale.\n`session` | object | Object with key/value pairs that will be set as session variables.\n\n##### Special session variables\n\nSome session variables are handled in a special way.\n\n* `XS_APPLICATIONUSER` - can be set to a user token (SAML/JWT) to associate the aplication user with the database connection\n* `SAP_PASSPORT` - used to propagate SAP passport to SAP HANA, used for end-to-end tracing\n* `APPLICATION` - the name of the application initiating the database connection\n\n**Note**: If providing an SAP Passport in the `session` object of the [additional options](#additional-options),\nit should have already been updated with data, specific to the component that consumes *@sap/hdbext*.\nFor more information, see the documentation of the *@sap/e2e-trace* package.\n\nThe [Express middleware](#express-middleware) provided by this package sets automatically\n`XS_APPLICATIONUSER` and `SAP_PASSPORT` by extracting relevant data from the HTTP request.\n\n#### Example\n\nSample configuration with both [database connection options](#database-connection-options) and [additional options](#additional-options):\n\n```js\n{\n  host: 'my.host',\n  port: 30015,\n  user: 'my_user',\n  password: 'secret',\n  schema: 'name_of_the_schema',\n  isolationLevel: hdbext.constants.isolation.SERIALIZABLE,\n  locale: 'en_US',\n  session: {\n    APPLICATION: 'myapp',\n    SAP_PASSPORT: 'passport'\n  }\n}\n```\n\n### connectionOptions.getGlobalOptions()\n\nProvides default values for these connection options:\n* session.APPLICATION - extracted from VCAP_APPLICATION\n* session.APPLICATIONVERSION - extracted from package.json in current directory\n\nThe application can override these defaults by setting these options explicitly.\n\n### connectionOptions.getRequestOptions(req)\n\nProvides these connection options based on the given HTTP request (_req_):\n* session.SAP_PASSPORT (Updated with default component data)\n* session.XS_APPLICATIONUSER\n* locale\n\n### updateConnectionOptions(client, options, callback)\n\nIt is also possible to change options on existing connection by using the `updateConnectionOptions` function:\n\n```js\nhdbext.updateConnectionOptions(client, options, function(error) {\n  if (error) {\n    return console.error(error);\n  }\n\n  // ...\n});\n```\n\n`options` is an object having properties same as the [additional options](#additional-options).\n\n### loadProcedure(client, schemaName, procedureName, callback)\n\nCalling stored procedures could become complex using plain [hdb][4] driver, so there are functionalities provided to simplify these calls.\n\nFor example, if you have the following stored procedure:\n\n```sql\ncreate procedure PROC_DUMMY (in a int, in b int, out c int, out d DUMMY, out e TABLES)\n  language sqlscript\n  reads sql data as\n  begin\n    c := :a + :b;\n    d = select * from DUMMY;\n    e = select * from TABLES;\n  end\n```\n\nyou can call it via the [hdb](https://www.npmjs.com/package/hdb) driver in the following way:\n\n```js\nclient.prepare('call PROC_DUMMY (?, ?, ?, ?, ?)', function(err, statement) {\n  if (err) {\n    return console.error(err);\n  }\n\n  statement.exec({ A: 3, B: 4 }, function(err, parameters, dummyRows, tableRows) {\n    if (err) {\n      return console.error(err);\n    }\n\n    console.log('C:', parameters.C);\n    console.log('Dummies:', dummyRows);\n    console.log('Tables:', tableRows);\n  });\n});\n```\n\n**Note**: Non-quoted names are automatically converted to uppercase by HANA.\n\nWith *@sap/hdbext* you don't need to construct a `CALL` statement. The procedure can be loaded by its name.\nThe code can look like this:\n\n```js\nhdbext.loadProcedure(client, 'MY_SCHEMA', 'PROC_DUMMY', function(err, sp) {\n  sp({ A: 3, B: 4 }, function(err, parameters, dummyRows, tableRows) {\n    if (err) {\n      return console.error(err);\n    }\n\n    console.log('C:', parameters.C);\n    console.log('Dummies:', dummyRows);\n    console.log('Tables:', tableRows);\n  });\n});\n```\n\nTo use the current schema, pass an empty string `''`, `null` or `undefined` for schema.\n\n`loadProcedure(client, schemaName, procedureName, callback)` retruns a JavaScript function which you can call directly.\nThe function has the `paramsMetadata` property containing metadata for all parameters of the stored procedure.\nThis could be useful if you need to implement generic stored procedures calling.\n\nYou can also pass the input parameters directly in the proper order:\n\n```js\nsp(3, 4, function(err, parameters, dummyRows, tableRows) {\n  // ...\n});\n```\n\nWhere the big advantage comes in, is with table parameters.\nYou can pass an array of objects and *@sap/hdbext* will auto convert it into a table parameter.\nSay we have a `customer` table with `ID` and `NAME` columns and the following procedure:\n\n```sql\ncreate procedure \"getCustomers\" (in in_table_1 \"customer\")\nlanguage sqlscript reads sql data as begin\nselect * from :in_table_1;\nend;\n```\n\nYou can call it like this:\n\n```js\nclient.loadProcedure('MY_SCHEMA', 'getCustomers', function(err, sp) {\n  if (err) {\n    return console.error(err);\n  }\n\n  sp([\n    { ID: 1, NAME: 'alex' },\n    { ID: 2, NAME: 'peter' }\n  ], function(err, parameters, dummyRows, tableRows) {\n    // ...\n  });\n});\n```\n\nIn this example each array element represents a table row. Property names should case-sensitively match the corresponding column names.\n\nInternally *@sap/hdbext* creates a local temporary table in the current schema for each table parameter.\nThus, the current user needs the respective permissions.\n\n\n### Connection Pooling\n\n*@sap/hdbext* implements a simple [generic-pool][1] for pooling connections.\n\nTo use it you first synchronously create the pool:\n\n```js\nvar pool = hdbext.getPool(hanaConfig, poolConfig);\n```\n\nThe `hanaConfig` argument contains both [database connection options](#database-connection-options) and [additional options](#additional-options).\n\nThe `poolConfig` argument is optional. It may contain configurations for the pool itself.\n\nYou can acquire a client from the pool. It is delivered via a callback:\n\n```js\npool.acquire(function(err, client) {\n  // ...\n});\n```\n\nIf settings of the pooled connection need to be changed, an optional `options` object can be used.\n```js\npool.acquire(options, function(err, client) {\n  // ...\n});\n```\nRefer to the [additional options](#additional-options) section for more details.\n\n\nWhen the client is no longer needed you should release it to the pool with `pool.release(client);`, `client.close();` or `client.disconnect();`.\n\nWhen the pool is no longer needed you can dispose of the idle connections by draining the pool with `pool.drain()`.\n\n\n### Express Middleware\n\n*@sap/hdbext* provides an [Express][3] [middleware][2] which allows easy access to a connection pool in an Express based application.\nIn the background a connection pool is created. The connection is automatically returned to the pool when the express request is closed or finished.\n\n```js\nvar hdbext = require('@sap/hdbext');\nvar express = require('express');\n\nvar app = express();\napp.use(hdbext.middleware(hanaConfig, poolConfig));\n\napp.get('/execute-query', function (req, res) {\n  var client = req.db;\n\n  client.exec('SELECT * FROM DUMMY', function (err, rs) {\n    if (err) {\n      return res.end('Error: ' + err.message);\n    }\n\n    res.end(JSON.stringify(rs));\n  });\n});\n```\n\nThe argument `hanaConfig` may contain both [database connection options](#database-connection-options) and [additional options](#additional-options).\n\nThe argument `poolConfig` is optional. It may contain configurations for the created pool.\n\nThe middleware sets the `XS_APPLICATIONUSER` and the `SAP_PASSPORT` session variables automatically,\nif the corresponding data is available in the HTTP request.\nIt also sets `APPLICATION` and `APPLICATIONVERSION` session variables automatically to some\ndefault values extracted from the environment.\n\n### SQL Parameter Utilities\n\nThe `hdbext.sqlInjectionUtils` object contains several synchronous utility functions that can be used to prevent SQL injections.\n\n#### isAcceptableParameter(value, maxToken)\n\nReturns true if `value` can be used to construct SQL statements.\nThe number of tokens a value is allowed to contain is set via the optional `maxToken` argument. Defaults to 1.\n\n#### isAcceptableQuotedParameter(value)\n\nReturns true if the provided `value` is quoted correctly and can be used in an SQL statement.\n\n#### escapeDoubleQuotes(value)\n\nReturns the `value` parameter with all double quotation marks escaped (i. e. doubled).\n\n#### escapeSingleQuotes(value)\n\nReturns the `value` parameter with all single quotation marks escaped (i. e. doubled).\n\n\n[1]: https://github.com/coopernurse/node-pool\n[2]: http://expressjs.com/guide/using-middleware.html\n[3]: http://expressjs.com/\n[4]: https://www.npmjs.com/package/hdb\n[5]: https://www.npmjs.com/package/hdb#establish-a-database-connection\n[6]: https://www.npmjs.com/package/hdb#encrypted-network-communication\n", 
  "main": "index.js", 
  "files": [
    "lib", 
    "package.json", 
    "README.md", 
    "CHANGELOG.md", 
    "index.js"
  ], 
  "_npmVersion": "3.10.8", 
  "_requested": {
    "name": "@sap/hdbext", 
    "escapedName": "@sap%2fhdbext", 
    "rawSpec": "^4.3.1", 
    "raw": "@sap/hdbext@^4.3.1", 
    "scope": "@sap", 
    "type": "range", 
    "spec": ">=4.3.1 <5.0.0"
  }, 
  "description": "HDB extension library and utility functions for using SAP HANA in node.js", 
  "optionalDependencies": {}, 
  "_requiredBy": [
    "/"
  ], 
  "dependencies": {
    "@sap/e2e-trace": "^1.1.2", 
    "accept-language": "2.0.16", 
    "lodash": "4.13.1", 
    "winston": "1.0.0", 
    "hdb": "0.12.1", 
    "generic-pool": "2.2.0", 
    "debug": "2.2.0", 
    "async": "1.5.0", 
    "verror": "1.6.0", 
    "lru-cache": "4.0.0"
  }, 
  "scripts": {
    "test": "node node_modules/istanbul/lib/cli.js cover node_modules/mocha/bin/_mocha test -- --recursive --check-leaks", 
    "lint": "eslint -c node_modules/node-style/.eslintrc -f stylish lib/ index.js", 
    "prepareRelease": "clean-packages && npm prune --production"
  }, 
  "_shrinkwrap": null, 
  "name": "@sap/hdbext", 
  "_where": "/data/xmake/prod-build7030/w/final-assembly-xsjs-OD-linuxx86_64_indirectshipment/gen/out/module", 
  "_id": "@sap/hdbext@4.3.3", 
  "_shasum": "aa28b71aeb68b630621a99f1922e534eef21f430"
}