{
  "_location": "/@sap/textbundle", 
  "_spec": "@sap/textbundle@^2.0.6", 
  "readmeFilename": "README.md", 
  "keywords": [
    "i18n", 
    "internationalization", 
    "text", 
    "bundle"
  ], 
  "devDependencies": {
    "gulp-sonar": "2.1.5", 
    "chai": "3.5.0", 
    "istanbul": "0.4.4", 
    "gulp-eslint": "1.1.1", 
    "filter-node-package": "^2.0.0", 
    "mocha": "3.0.2", 
    "gulp": "3.9.1", 
    "gulp-concat": "2.6.0", 
    "del": "2.2.1", 
    "eslint": "1.4.3", 
    "gulp-util": "3.0.7", 
    "gulp-istanbul": "1.0.0", 
    "gulp-mocha": "3.0.0"
  }, 
  "_from": "@sap/textbundle@>=2.0.6 <3.0.0", 
  "_inCache": true, 
  "engines": {
    "node": "^0.12.7 || ^4.4.0 || ^6.0.0"
  }, 
  "_phantomChildren": {}, 
  "_args": [
    [
      {
        "name": "@sap/textbundle", 
        "escapedName": "@sap%2ftextbundle", 
        "rawSpec": "^2.0.6", 
        "raw": "@sap/textbundle@^2.0.6", 
        "scope": "@sap", 
        "type": "range", 
        "spec": ">=2.0.6 <3.0.0"
      }, 
      "/data/xmake/prod-build7030/w/final-assembly-xsjs-OD-linuxx86_64_indirectshipment/gen/out/module"
    ]
  ], 
  "_nodeVersion": "6.9.1", 
  "version": "2.0.6", 
  "readme": "@sap/textbundle\n==========\n\nSimple tool for text internationalization in Node.js. Based on the same concept as SAP UI5, this module works with UTF-8 encoded properties files.\nLanguage defaulting is also borrowed from SAP UI5 with the idea the UI and server-side code\nuse the same text internationalization approach.\n\n## [API documentation](./API.md)\n\n## Usage\n\nAssuming you have these files in directory ./test/properties:\n\n*i18n_en_EN.properties*\n```\ngreeting = Hello {0}, you are {1} years old.\n```\n\n*i18n_de.properties*\n```\ngreeting = Hallo {0}, Sie sind {1} Jahre alt.\n```\n\n### Creating a TextBundle\n#### Old API\n```js\nvar TextBundle = require('@sap/textbundle').TextBundle;\n\nvar bundle = new TextBundle({path: 'test/properties/i18n', locale: 'en_EN' } );\n```\n\n#### New API\n```js\nvar TextBundle = require('@sap/textbundle').TextBundle;\n\nvar bundle = new TextBundle('test/properties/i18n', 'en_EN');\n```\n\n#### Constructing localized messages\n```js\nvar TextBundle = require('@sap/textbundle').TextBundle;\n\nvar bundle = new TextBundle(path.resolve(__dirname, 'test/properties/i18n'), 'en_EN');\n\nbundle.getText('greeting'); // will return 'Hello {0}, you are {1} years old.'\nbundle.getText('greeting', ['Stefan']); // will return 'Hello Stefan, you are undefined years old.'\nbundle.getText('greeting', ['Stefan', '21']); // will return 'Hello Stefan, you are 21 years old.'\n\n// using DE locale\nvar bundle = new TextBundle(path.resolve(__dirname, 'test/properties/i18n'), 'de');\nbundle.getText('greeting', ['Stefan', '21']); // will return 'Hallo Stefan, Sie sind 21 Jahre alt.'\n```\n\n### Loading bundles\nBundles can be loaded by providing the absolute path to the resource bundle or relative path. If relative a path is used it will be resolved with respect to your JavaScript file. Absolute path to the resource bundle should be favored for TextBundles. \n\nDefault file extension is `.properties`. If your file has a different extension, you just need to append it to the path you provide.\nThe format of the file still has to be UTF-8, and the structure has to be properties-like.\n\n```js\nvar TextBundle = require('@sap/textbundle');\nvar txtBundle = new TextBundle({path: './test/txt/i18n.txt'});\n```\n\n### Getting texts and language defaulting\n\nGetting text is straight forward - shown on the examples above already.\n\nMessage retrieval from properties files is done using fall-back mechanism that searches for the provided key\nin a hierarchical order and returns the text associated with this key from the first occurrence in some of the files.\n\nFollowing order is applied when text is retrieved for specific locale:\n\n```\n  language -> country -> en -> root -> 'not-found, return the key'\n```\n\n\nA simple example:  locale is 'de_DE', bundle name is 'i18n', the order in which properties files are checked for key existence is following:\n\n```\n  i18n_de_DE\n  i18n_de\n  i18n_en\n  i18n\n  // if not found, the key is returned back\n```\n\n### ResourceManager \nResourceManager class allows managing resources for your module by caching the various TextBundle in order to avoid repeatedly loading them. \n\n```js\nvar ResourceManager = require('@sap/textbundle').ResourceManager;\nvar rm = new ResourceManager(path.resolve(__dirname, 'test/properties/i18n'));\n\nvar bundle = rm.getTextBundle('en_EN');\nbundle.getText('greeting');\n```\n\n### Asynchronous resource loading\nIn order to improve server scalability, resources should be loaded through asynchronous file system operations.   \n\n```js\nvar ResourceManager = require('@sap/textbundle').ResourceManager;\nvar rm = new ResourceManager(path.resolve(__dirname, 'test/properties/i18n'));\n\nrm.loadTextBundle('en_EN')\n    .then(function (bundle) {\n        bundle.getText('greeting');\n    });\n```\n\n### Resource loading middleware\n\n```js\nvar ResourceManager = require('@sap/textbundle').ResourceManager;\nvar rm = new ResourceManager(path.resolve(__dirname, 'test/properties/i18n'));\nvar express = require('express');\n\nvar app = express();\n\nfunction requestLocale(req) {\n    var locale = req.locale = req.acceptsLanguages(['en-US', 'en', 'de-DE', 'de', 'fr-FR', 'fr']) || 'en';\n    return locale;\n}\n\napp.use('/', rm.getMiddleware(requestLocale));\n\napp.use('/myHandler', function (req, res, next) {\n    // resources for request locale have been loaded at this stage \n    var bundle = rm.getTextBundle(req.locale);\n    bundle.getText('greeting');\n});\n```\n", 
  "main": "index.js", 
  "files": [
    "example", 
    "lib", 
    "package.json", 
    "API.md", 
    "README.md", 
    "index.js"
  ], 
  "_npmVersion": "3.10.8", 
  "_requested": {
    "name": "@sap/textbundle", 
    "escapedName": "@sap%2ftextbundle", 
    "rawSpec": "^2.0.6", 
    "raw": "@sap/textbundle@^2.0.6", 
    "scope": "@sap", 
    "type": "range", 
    "spec": ">=2.0.6 <3.0.0"
  }, 
  "description": "Utility for texts internationalization.", 
  "optionalDependencies": {}, 
  "_requiredBy": [
    "/"
  ], 
  "dependencies": {}, 
  "scripts": {
    "test": "node make dist", 
    "lint": "node make eslint", 
    "prepareRelease": "clean-packages && npm prune --production"
  }, 
  "_shrinkwrap": null, 
  "name": "@sap/textbundle", 
  "directories": {
    "test": "test", 
    "example": "example"
  }, 
  "_where": "/data/xmake/prod-build7030/w/final-assembly-xsjs-OD-linuxx86_64_indirectshipment/gen/out/module", 
  "_id": "@sap/textbundle@2.0.6", 
  "_shasum": "9531c76108c90d07a87b741c01afa6c8e1ebf17e"
}