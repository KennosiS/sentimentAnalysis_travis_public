'use strict';

var ModelFileError = require('./errors/modelFileError');

//API
module.exports = {
    getTargetEnd: getTargetEnd,
    getFromEnd: getFromEnd,
    createFromRoleString: makeStringCreator(getFromEnd),
    createToRoleString: makeStringCreator(getTargetEnd)
};


function getTargetEnd(navigation, association, entityType) {

    if (!navigation.from) {
        if (association.principal.type === association.dependent.type) {
            throw new ModelFileError('No "from" clause given', context);
        } else if (association.principal.type === entityType.name) {
            return association.dependent;
        } else if (association.dependent.type === entityType.name) {
            return association.principal;
        }
    } else if (navigation.from.principal === true) {
        return association.dependent;
    } else if (navigation.from.dependent === true) {
        return association.principal;
    } else {
        throw new ModelFileError('Invalid "from" clause', context);
    }
}

function getFromEnd(navigation, association, entityType) {
    if (!navigation.from) {
        if (association.principal.type === association.dependent.type) {
            throw new ModelFileError('No "from" clause given', context);
        } else if (association.principal.type === entityType.name) {
            return association.principal;
        } else if (association.dependent.type === entityType.name) {
            return association.dependent;
        }
    } else if (navigation.from.principal === true) {
        return association.principal;
    } else if (navigation.from.dependent === true) {
        return association.dependent;
    } else {
        throw new ModelFileError('Invalid "from" clause', context);
    }
}

function makeStringCreator(getAssociationEnd){
    return function createAssociationEndString(navigation, association, entityType){
        var associationEnd = getAssociationEnd(navigation, association, entityType);
        return associationEnd.type + createPrincipalDependantString(associationEnd, association);
    };
}

function createPrincipalDependantString(associationEnd, association){
    if (associationEnd === association.principal){
        return 'Principal';
    }

    if (associationEnd === association.dependent){
        return 'Dependent';
    }

    return '';
}
