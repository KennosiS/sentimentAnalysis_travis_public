'use strict';

var winston = require('winston');

//Code
var EmptyLogger = function () {
};

EmptyLogger.prototype.cloneWithContext = function () {
    return new EmptyLogger();
};

Object.keys(winston.levels).forEach(function(levelKey){
    EmptyLogger.prototype[levelKey] = function(){};
});

function Logger(logger, context) {
    this.logger = logger || new EmptyLogger();
    this.context = context || { callId : 0};
    this.logger.info('Logger created for request [' + this.context.uniqueNetworkRequestID + ']');
}

Logger.prototype.cloneWithContext = function (context) {
    this.logger.info('Logger cloneWithContext[' + this.context.uniqueNetworkRequestID + ']');
    return new Logger(this.logger, context);

};
Logger.prototype.error = function (scope, text) {
    //level 0
    this.logger.error('[' + this.context.uniqueNetworkRequestID + '] ' + scope + '::' + text);
};

Logger.prototype.warn = function (scope, text) {
    //level 1
    this.logger.warn('[' + this.context.uniqueNetworkRequestID + '] ' + scope + '::' + text);
};


Logger.prototype.info = function (scope, text, textIndent) {
    //level 2
    if (textIndent) {
        textIndent = '\n    '+textIndent.replace('\n','\n    ');
    } else {
        textIndent = '';
    }

    this.logger.info('[' + this.context.uniqueNetworkRequestID + '] ' + scope + '::' + text+textIndent);
};

Logger.prototype.verbose = function (scope, text) {
    //level 3
    this.logger.verbose('[' + this.context.uniqueNetworkRequestID + '] ' + scope + '::' + text);
};

Logger.prototype.debug = function (scope, text) {
    //level 4
    this.logger.debug('[' + this.context.uniqueNetworkRequestID + '] ' + scope + '::' + text);
};

Logger.prototype.silly = function (scope, text) {
    //level 5
    this.logger.debug('[' + this.context.uniqueNetworkRequestID + '] ' + scope + '::' + text);
};

module.exports = Logger;
