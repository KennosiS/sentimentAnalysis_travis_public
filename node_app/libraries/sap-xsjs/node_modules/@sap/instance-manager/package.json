{
  "_location": "/@sap/instance-manager", 
  "_spec": "@sap/instance-manager@^1.0.1", 
  "readmeFilename": "README.md", 
  "devDependencies": {
    "chai": "3.5.0", 
    "proxyquire": "1.7.10", 
    "istanbul": "0.4.4", 
    "node-build": "^1.1.1", 
    "filter-node-package": "^2.0.0", 
    "mocha": "3.0.2", 
    "eslint": "3.2.2", 
    "node-style": "^2.0.0", 
    "nock": "8.0.0"
  }, 
  "_from": "@sap/instance-manager@>=1.0.1 <2.0.0", 
  "_inCache": true, 
  "engines": {
    "node": "^0.12.7 || ^4.4.7 || ^6.0.0"
  }, 
  "_phantomChildren": {}, 
  "_args": [
    [
      {
        "name": "@sap/instance-manager", 
        "escapedName": "@sap%2finstance-manager", 
        "rawSpec": "^1.0.1", 
        "raw": "@sap/instance-manager@^1.0.1", 
        "scope": "@sap", 
        "type": "range", 
        "spec": ">=1.0.1 <2.0.0"
      }, 
      "/data/xmake/prod-build7030/w/final-assembly-xsjs-OD-linuxx86_64_indirectshipment/gen/out/module"
    ]
  ], 
  "_nodeVersion": "6.9.1", 
  "version": "1.0.1", 
  "readme": "# @sap/instance-manager\n\nNode.js package for creating and deleting service instances per tenant within an application at runtime.\n\n## Overview\n\nThis package provides a client for the _Instance Manager_ - a component that creates and deletes\nservice instances (via REST API) for a specified key. _Instance Manager_ can be used in the context\nof multitenant applications where the key an instance is associated with is the tenant id.\n\n_Multitenancy_ is a concept for sharing resources between several different\nand unrelated to each other groups of users called _tenants_.\nExample: subscriptions to a commercial cloud application can be sold to\ntwo different companies each of which should use the application in isolation\nfrom the other one. Customizations are also applied (e.g. different branding,\nidentity providers, database schemas etc.).\n\nA typical application has access to external resources (e.g. a database or messaging) via _services_.\nIf an application is used by different tenants, then using a separate service instance\nfor each one will improve isolation since service binding provides access to a particular resource.\n\nWith this package a Node.js application can dynamically create and delete service instances per tenant at runtime.\nAn instance of a _managed service_ of the desired type is created first and is then bound to the application.\nFor a HANA database the _managed service_ is called _'managed-hana'_. This service binding only provides\nparameters (HTTP endpoints and credentials) which can later be used by the application for creating and deleting service instances\nof the desired type for each tenant.\n\n## API\n\n```js\nvar createInstanceManager = require('@sap/instance-manager').create;\n\nvar options = { /* properties from service binding */ };\ncreateInstanceManager(options, function (err, instanceManager) {\n  if (err) {\n    return console.log('Create instance manager error:', err.message);\n  }\n\n  instanceManager.create('my-tenant', function (err, instance) {\n    if (err) {\n      return console.log('Create error:', err.message);\n    }\n\n    // consume instance.credentials\n    console.log(instance);\n\n    instanceManager.get('my-tenant', function (err, instance) {\n      if (err) {\n        return console.log('Get error:', err.message);\n      }\n\n      // same instance\n      console.log(instance);\n\n      instanceManager.delete('my-tenant', function (err) {\n        if (err) {\n          return console.log('Delete error:', err.message);\n        }\n\n        console.log('Instance deleted');\n      });\n    });\n  });\n});\n```\n\n### Options\n\nThe _managed service_ bound to the application (for example _managed-hana_) provides credentials\nas well as REST endpoints of the _Instance Manager_ - the component that handles creation\nand deletion of services. These credentials and endpoints are mandatory.\n\nThe create and delete operations are executed asynchronously on server side. To provide an easier interface,\nthis library also implements polling until an operation is finished. Developers can tune polling\nvia some optional properties.\n\nSince operations involve network activity (thus, can be considered relatively slower) the package\nalso caches the created instances. Cache options can also be provided by developers.\n\nProperty | Mandatory | Details\n-------- | --------- | -------\nuser | x | User for authentication.\npassword | x | Password for the user.\npost_managed_instance_url | x | REST endpoint used for creating a new service instance for a tenant.\nget_managed_instance_url | x | REST endpoint used for getting the details about a specific tenant service instance.\nget_all_managed_instances_url | x | REST endpoint used for getting the details about all instances (for all tenants).\ndelete_managed_instance_url | x | REST endpoint used for deletion of a service instance.\npolling_interval_millis | | Defaults to 300. States how many milliseconds to wait between requests in the polling phase.\npolling_timeout_seconds | | Defaults to 120. Sets a limit for the amount of time (in seconds) that can be spent in polling.\ncache_max_items | | Default value is 500. States the capacity of the cache.\ncache_item_expire_seconds | | Defaults to 600 (10 minutes). Number of seconds after which a cache entry expires.\n\n**Note**:\n- A _managed service_ binding contains all of the mandatory properties mentioned above.\n- It is recommended to have a single instance manager JavaScript object per _managed service_ bound to the application.\n\n### Methods\n- `create` - creates a service instance for the provided tenant.\nThe method polls until the instance is successfully created and then invokes the callback.\nReports error if an instance for this tenant already exists.\n- `get` - gets the corresponding instance for the provided tenant either from cache or from server.\nValue of `null` means that a service instance for this tenant does not exist.\n**Note**: this method only polls if the instance is in status `CREATION_IN_PROGRESS`.\nIn all other cases it returns the service instance as it is on server.\nThus, having the `credentials` property on the `instance` object in the callback is not guaranteed.\n- `delete` - deletes service instance for the provided tenant.\nThe method polls until the instance is successfully deleted and then invokes the callback.\nReports error if an instance for this tenant does not exists.\n\nWhen the callback of a method is invoked with an error and this error is caused by an unexpected HTTP response code\nreceived from the server, then this error object will have a `statusCode` property with the status code of the received HTTP response.\n\n## Debug logs\n\nOne can enable debug logs of this package via adding _instance-manager_ to the `DEBUG` environment variable.\n", 
  "main": "index.js", 
  "files": [
    "lib", 
    "index.js", 
    "package.json", 
    "README.md"
  ], 
  "_npmVersion": "3.10.8", 
  "_requested": {
    "name": "@sap/instance-manager", 
    "escapedName": "@sap%2finstance-manager", 
    "rawSpec": "^1.0.1", 
    "raw": "@sap/instance-manager@^1.0.1", 
    "scope": "@sap", 
    "type": "range", 
    "spec": ">=1.0.1 <2.0.0"
  }, 
  "description": "Node.js package for creating and deleting service instances per tenant within an application at runtime.", 
  "optionalDependencies": {}, 
  "_requiredBy": [
    "/"
  ], 
  "dependencies": {
    "debug": "2.2.0", 
    "clone": "2.1.0", 
    "request": "2.79.0", 
    "lru-cache": "4.0.0"
  }, 
  "scripts": {
    "test": "node-test", 
    "lint": "eslint -c node_modules/node-style/.eslintrc -f stylish lib/ index.js", 
    "prepareRelease": "clean-packages && npm prune --production"
  }, 
  "_shrinkwrap": null, 
  "name": "@sap/instance-manager", 
  "_where": "/data/xmake/prod-build7030/w/final-assembly-xsjs-OD-linuxx86_64_indirectshipment/gen/out/module", 
  "_id": "@sap/instance-manager@1.0.1", 
  "_shasum": "b871e903c219fcad5f5086364cb6b4a3c8f0290d"
}