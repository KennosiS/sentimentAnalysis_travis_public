'use strict';

var HTTP = require('./constants').STATUS.HTTP;
var ENDPOINT = require('./constants').ENDPOINT;
var format = require('util').format;
var request = require('request');
var debug = require('debug')('instance-manager');
var DEBUG_SEPARATOR = ' - ';

module.exports = RestAdapter;

function RestAdapter(options) {
  this._options = options;
}

RestAdapter.prototype.getAllInstances = function (callback) {
  var reqOptions = this._buildOptions(ENDPOINT.GET_ALL);
  request(reqOptions, function (err, res, body) {
    var reqContext = [reqOptions.method, resourceName()];

    if (err) {
      return reportNetworkError(err, reqContext, callback);
    }

    reqContext.push('Response status ' + res.statusCode);

    if (res.statusCode !== HTTP.OK) {
      return reportUnexpectedStatusError(reqContext, res, body, callback);
    }

    var parseResult = safeParse(body);
    if (parseResult.err) {
      return reportParsingError(reqContext, parseResult.err, body, callback);
    }

    reqContext.push('All instances count: ' + parseResult.data.length);
    debug(reqContext.join(DEBUG_SEPARATOR));
    callback(null, parseResult.data);
  });
};

RestAdapter.prototype.initCreateInstance = function (tenant, callback) {
  var reqOptions = this._buildOptions(ENDPOINT.CREATE, tenant);
  request(reqOptions, function (err, res, body) {
    var reqContext = [reqOptions.method, resourceName(tenant)];

    if (err) {
      return reportNetworkError(err, reqContext, callback);
    }

    reqContext.push('Response status ' + res.statusCode);

    if (res.statusCode !== HTTP.CREATE_STARTED) {
      return reportUnexpectedStatusError(reqContext, res, body, callback);
    }

    debug(reqContext.join(DEBUG_SEPARATOR));
    callback(null);
  });
};

RestAdapter.prototype.getInstance = function (tenant, callback) {
  var reqOptions = this._buildOptions(ENDPOINT.GET, tenant);
  request(reqOptions, function (err, res, body) {
    var reqContext = [reqOptions.method, resourceName(tenant)];

    if (err) {
      return reportNetworkError(err, reqContext, callback);
    }

    reqContext.push('Response status ' + res.statusCode);

    if (res.statusCode === HTTP.NOT_FOUND) {
      debug(reqContext.join(DEBUG_SEPARATOR));
      return callback(null, null);
    }

    if (res.statusCode !== HTTP.OK) {
      return reportUnexpectedStatusError(reqContext, res, body, callback);
    }

    var parseResult = safeParse(body);
    if (parseResult.err) {
      return reportParsingError(reqContext, parseResult.err, body, callback);
    }

    reqContext.push('Instance status ' + parseResult.data.status);
    debug(reqContext.join(DEBUG_SEPARATOR));
    callback(null, parseResult.data);
  });
};

RestAdapter.prototype.initDeleteInstance = function (tenant, callback) {
  var reqOptions = this._buildOptions(ENDPOINT.DELETE, tenant);
  request(reqOptions, function (err, res, body) {
    var reqContext = [reqOptions.method, resourceName(tenant)];

    if (err) {
      return reportNetworkError(err, reqContext, callback);
    }

    reqContext.push('Response status ' + res.statusCode);

    if (res.statusCode !== HTTP.DELETE_STARTED) {
      return reportUnexpectedStatusError(reqContext, res, body, callback);
    }

    debug(reqContext.join(DEBUG_SEPARATOR));
    callback(null);
  });
};

RestAdapter.prototype._buildOptions = function (endpoint, tenant) {
  var url = this._options[endpoint.name];
  return {
    method: endpoint.method,
    url: (tenant) ? url.replace('{tenant_id}', tenant) : url,
    auth: { user: this._options.user, password: this._options.password }
  };
};

function resourceName(tenant) {
  return (tenant) ? format("instance for tenant '%s'", tenant) : 'instances for all tenants';
}

function reportNetworkError(err, reqContext, callback) {
  reqContext.push('Error: ' + err.message);
  var message = reqContext.join(DEBUG_SEPARATOR);

  debug(message);
  callback(new Error(message));
}

function reportUnexpectedStatusError(reqContext, res, body, callback) {
  var reason = unexpectedStatusReason(res, body);
  reason && reqContext.push(reason);
  var message = reqContext.join(DEBUG_SEPARATOR);

  debug(message);
  var err = new Error(message);
  err.statusCode = res.statusCode;
  callback(err);
}

function unexpectedStatusReason(res, body) {
  if (!body) {
    return;
  }

  var contentType = res.headers['content-type'];
  if (contentType && contentType.indexOf('application/json') === 0) {
    var parseResult = safeParse(body);
    if (parseResult.data && parseResult.data.description) {
      return parseResult.data.description;
    }
  }
  return body;
}

function safeParse(str) {
  try {
    var data = JSON.parse(str);
    return { data: data };
  } catch (exc) {
    return { err: exc };
  }
}

function reportParsingError(reqContext, parsingErr, body, callback) {
  reqContext.push('Error parsing JSON ' + parsingErr.message);
  var message = reqContext.join(DEBUG_SEPARATOR);

  debug(message, 'Body:', body);
  callback(new Error(message));
}
