{
  "_location": "/@sap/jobs-client", 
  "_spec": "@sap/jobs-client@^1.0.14", 
  "readmeFilename": "README.md", 
  "devDependencies": {
    "nock": "9.0.8", 
    "istanbul": "0.4.4", 
    "filter-node-package": "^2.0.0", 
    "mocha": "3.0.2", 
    "eslint": "3.2.2", 
    "node-style": "^2.0.0", 
    "should": "10.0.0"
  }, 
  "_from": "@sap/jobs-client@>=1.0.14 <2.0.0", 
  "_inCache": true, 
  "engines": {
    "node": "^0.12.7 || ^4.4.0 || ^6.0.0"
  }, 
  "_phantomChildren": {}, 
  "_args": [
    [
      {
        "name": "@sap/jobs-client", 
        "escapedName": "@sap%2fjobs-client", 
        "rawSpec": "^1.0.14", 
        "raw": "@sap/jobs-client@^1.0.14", 
        "scope": "@sap", 
        "type": "range", 
        "spec": ">=1.0.14 <2.0.0"
      }, 
      "/data/xmake/prod-build7030/w/final-assembly-xsjs-OD-linuxx86_64_indirectshipment/gen/out/module"
    ]
  ], 
  "_nodeVersion": "6.9.1", 
  "version": "1.1.0", 
  "readme": "@sap/jobs-client\n=========\n\nNode.js client for XS Advanced Job Scheduler service\n\nThis is a small Node.js module to integrate jobs in your Node.js application.\nThe module contains utilities to create REST calls according to expected by job scheduler \nservice request format used to register/unregister jobs in job scheduler service, update\njob schedules and job status.\n\n## Usage\n\nThis module works with job descriptor objects, having the properties as\nthe expected by the respective service in JobScheduler.\n\nExample usage:\n\n```js\n  var jobsc = require('@sap/jobs-client');\n\n  var options = {\n    host: 'localhost',\n    port: 4242,\n    timeout: 15000,\n    user: 'username',\n    password: 'password',\n    baseURL: 'http://apphost:port/'\n  };\n  \n  var myJob = { /* according to job scheduler documentation */ };\n\n  var scheduler = new jobsc.Scheduler(options);\n  var scJob = { job: myJob };\n\n  scheduler.createJob(scJob, function (error, body) {\n    if (error) {\n      return console.log('Error registering new job %s', error);\n    }\n    // job was created successfully\n    job.id = body._id; \n  });\n\n  ...\n```\n```\nUpdate job,\n```js\n  var req = {\n    jobId: 33,\n    job: {\n      user : 'John',\n      password : 'secret',\n      active : 1\n    }\n  };\n  scheduler.updateJob(req, function(err, result) {\n    if(err){\n      return console.log('Error updating job: %s', err);\n    }\n    //job was updated successfully\n  });\n```\n\nDelete job,\n```js\n  var req = {\n    jobId: 33\n  };\n  scheduler.deleteJob(req, function(err, result) {\n    if(err){\n      return console.log('Error deleting job: %s', err);\n    }\n    //job was deleted successfully\n  });\n```\n\nGet job Details,\n```js\n  var req = {\n    //by Id\n    jobId: 33\n  };\n  scheduler.fetchJob(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving job: %s', err);\n    }\n    //job details retrieved successfully\n  });\n  var req = {\n    //by name\n    name: 'my job'\n  };\n  scheduler.fetchJob(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving job: %s', err);\n    }\n    //job details retrieved successfully\n  });\n```\n\nCreate job schedule,\n```js\n  var mySchedule = { /* according to job scheduler documentation */ }\n  var req = {\n    jobId: 33,\n    schedule: mySchedule\n  };\n  scheduler.createJobSchedule(req, function(err, result) {\n    if(err){\n      return console.log('Error creating job schedule: %s', err);\n    }\n    //Schedule created successfully\n  });\n```\n\nUpdate job schedule,\n```js\n  var req = {\n    jobId: 33,\n    scheduleId: 'ABC-DEF',\n    schedule: {\n      cron: \"* * * * 4\"\n    }\n  };\n  scheduler.updateJobSchedule(req, function(err, result) {\n    if(err){\n      return console.log('Error updating job schedule: %s', err);\n    }\n    //Schedule updated successfully\n  });\n```\n\nDelete job schedule,\n```js\n  var req = {\n    jobId: 33,\n    scheduleId: 'ABC-DEF'\n  };\n  scheduler.deleteJobSchedule(req, function(err, result) {\n    if(err){\n      return console.log('Error deleting schedule: %s', err);\n    }\n    //Schedule deleted successfully\n  });\n```\n\nGet all jobs,\n```js\n  var req = {};\n  scheduler.fetchAllJobs(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving jobs: %s', err);\n    }\n    //Jobs retrieved successfully\n  });\n```\n\nGet job schedule details,\n```js\n  var req = {\n    jobId: 33,\n    scheduleId: 'ABC-DEF',\n    displayLogs: false\n  };\n  scheduler.fetchJobSchedule(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving schedule: %s', err);\n    }\n    //Schedule retrieved successfully\n  });\n```\n\nGet schedules of job,\n```js\n  var req = {\n    jobId: 33\n  };\n  scheduler.fetchJobSchedules(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving all schedules: %s', err);\n    }\n    //All schedules retrieved successfully\n  });\n```\n\nUpdate run log of schedule,\n```js\n  var req = {\n    jobId: 33,\n    scheduleId: 'ABC-DEF',\n    runId: 1,\n    data: data\n  };\n  scheduler.updateJobRunLog(req, function(err, result) {\n    if(err){\n      return console.log('Error updating run log: %s', err);\n    }\n    //Run log updated successfully\n  });\n```\n\nGet run logs of schedule,\n```js\n  var req = {\n    jobId: 33,\n    scheduleId: 'ABC-DEF'\n  };\n  scheduler.getRunLogs(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving run logs: %s', err);\n    }\n    //Run log retrieved successfully\n  });\n```\n\nDelete all schedules of job,\n```js\n  var req = {\n    jobId: 3\n  };\n  scheduler.deleteAllJobSchedules(req, function(err, result) {\n    if(err){\n      return console.log('Error deleting schedules: %s', err);\n    }\n    //All schedules deleted successfully\n  });\n```\n\nBulk activation of schedules of job,\n```js\n  var req = {\n    jobId: 3\n  };\n  scheduler.activateAllSchedules(req, function(err, result) {\n    if(err){\n      return console.log('Error activating bulk schedules: %s', err);\n    }\n    //All schedules activated successfully\n  });\n```\n\nBulk deactivation of schedules of job,\n```js\n  var req = {\n    jobId: 3\n  };\n  scheduler.deactivateAllSchedules(req, function(err, result) {\n    if(err){\n      return console.log('Error deactivating bulk schedules: %s', err);\n    }\n    //All schedules deactivated successfully\n  });\n```\n\n\nGet action logs of job,\n```js\n  var req = {\n    jobId: 3\n  };\n  scheduler.getJobActionLogs(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving action logs: %s', err);\n    }\n    //All actionlogs logs retrieved successfully\n  });\n```\n\nGet action logs of schedule,\n```js\n  var req = {\n    jobId: 3,\n    scheduleId: \"ABC-DEF\"\n  };\n  scheduler.getScheduleActionLogs(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving action logs: %s', err);\n    }\n    //All actionlogs logs retrieved successfully\n  });\n```\n\nGet active and inactive jobcount\n```js\n  var req = {\n    activeStatus: true // true- for getting active number of jobs and false- for getting inactive number of jobs\n  };\n  scheduler.getJobCount(req, function(err, result) {\n    if(err){\n      return console.log('Error retrieving jobcount: %s', err);\n    }\n    //Active Job count retrieved successfully\n  });\n```\n\n###Search API :\nSearch can be done in both job and schedule entities. Here in the client 'q' contains the query parameter, you need to provide the query in decoded format, the client will decode the query. And filtering parameters can be provided as shown below:\n\n```js\nvar searchToken = {\n    q : 'job startTime:>2011-02-18 active:false',\n    displaySchedules : 'false',\n    offset : 0,\n    page_size : 5\n  };\n\n  scheduler.searchJobs(searchToken,function(error,result){\n      if(error){\n        return console.log('Error during Job search: %s',error);\n      }\n      console.log(JSON.stringify(result));\n\n  });\n  ```\n  For schedule search:\n  ```js\n  var searchScheduleToken = {\n    q : 'startTime:>2011-02-18 active:false',\n    offset : 0,\n    page_size : 5\n  };\n\n  scheduler.searchSchedules(searchScheduleToken,function(error,result){\n      if(error){\n        return console.log('Error during Schedule search %s',error);\n      }\n      console.log(JSON.stringify(result));\n\n  });\n  ```\n", 
  "main": "./lib", 
  "files": [
    "lib", 
    "package.json", 
    "README.md"
  ], 
  "_npmVersion": "3.10.8", 
  "_requested": {
    "name": "@sap/jobs-client", 
    "escapedName": "@sap%2fjobs-client", 
    "rawSpec": "^1.0.14", 
    "raw": "@sap/jobs-client@^1.0.14", 
    "scope": "@sap", 
    "type": "range", 
    "spec": ">=1.0.14 <2.0.0"
  }, 
  "description": "Node.js client library for job scheduler service in XS2", 
  "optionalDependencies": {}, 
  "_requiredBy": [
    "/"
  ], 
  "dependencies": {
    "request": "2.79.0"
  }, 
  "scripts": {
    "test": "node node_modules/istanbul/lib/cli.js cover node_modules/mocha/bin/_mocha test -- --recursive --check-leaks", 
    "lint": "eslint -c node_modules/node-style/.eslintrc -f stylish lib/", 
    "prepareRelease": "clean-packages && npm prune --production"
  }, 
  "_shrinkwrap": null, 
  "name": "@sap/jobs-client", 
  "_where": "/data/xmake/prod-build7030/w/final-assembly-xsjs-OD-linuxx86_64_indirectshipment/gen/out/module", 
  "_id": "@sap/jobs-client@1.1.0", 
  "_shasum": "e0962c9f8ad2b2958f67a347d450bfcd591cd1d9"
}