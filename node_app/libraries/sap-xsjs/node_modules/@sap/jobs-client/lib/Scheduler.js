'use strict';

var util = require('util');
var assert = require('assert');
var request = require('request');
var querystring = require('querystring');

module.exports = Scheduler;

/**
 * Thin wrapper of Job Scheduler API
 *
 * @param options Job Scheduler parameters
 */
function Scheduler(options) {
  assert(options);
  assert(options.baseURL);
  assert(!options.timeout || options.timeout > 0);
  assert(options.user);
  assert(options.password);

  this._baseURL = options.baseURL;
  if (this._baseURL.slice(-1) !== '/') {
    this._baseURL += '/';
  }
  this._baseURL += 'scheduler';

  this._timeout = ~~options.timeout || 15000; // ms
  this._requestDefaults = request.defaults({
    json: true,
    timeout: this._timeout,
    headers : {
      'Authorization' : 'Basic ' + this._buildBasicAuthHeader(options)
    }
  });
}

Scheduler.prototype.fetchJob = function(options, done) {
  assert(options.jobId || options.name);

  var req = {
    method: 'GET',
    uri: this._baseURL + '/jobs',
    qs: options
  };
  this._sendRequest(req, done);
};

Scheduler.prototype.createJob = function(options, done) {
  assert(options.job);

  var req = {
    method: 'POST',
    uri: this._baseURL + '/jobs',
    body: options.job
  };
  this._sendRequest(req, done);
};

Scheduler.prototype.updateJob = function(options, done) {
  assert(options.jobId);
  this._configureJob(options, options.jobId, done);
};

Scheduler.prototype.upsertJob = function(options, done) {
  assert(options.name);
  this._configureJob(options, querystring.escape(options.name), done);
};

Scheduler.prototype._configureJob = function(options, idPath, done) {
  assert(options.job);
  assert(idPath);

  var req = {
    method: 'PUT',
    uri: this._baseURL + '/jobs/' + idPath,
    body: options.job
  };
  this._sendRequest(req, done);
};

Scheduler.prototype.fetchJobSchedule = function(options, done) {
  assert(options.jobId);
  assert(options.scheduleId);
  assert(typeof options.displayLogs === 'boolean');

  var req = {
    method: 'GET',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules/' + options.scheduleId,
    qs: {
      displayLogs: options.displayLogs
    }
  };
  this._sendRequest(req, done);
};

Scheduler.prototype.createJobSchedule = function(options, done) {
  assert(options.jobId);
  assert(options.schedule);

  var req = {
    method: 'POST',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules',
    body: options.schedule
  };
  this._sendRequest(req, done);
};

Scheduler.prototype.updateJobSchedule = function(options, done) {
  assert(options.jobId);
  assert(options.scheduleId);
  assert(options.schedule);

  var req = {
    method: 'PUT',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules/' + options.scheduleId,
    body: options.schedule
  };
  this._sendRequest(req, done);
};

Scheduler.prototype.deleteJobSchedule = function(options, done) {
  assert(options.jobId);
  assert(options.scheduleId);

  var req = {
    method: 'DELETE',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules/' + options.scheduleId
  };
  this._sendRequest(req, done);
};

Scheduler.prototype.updateJobRunLog = function(options, done) {
  assert(options.jobId);
  assert(options.scheduleId);
  assert(options.runId);
  assert(options.data);

  var req = {
    method: 'PUT',
    uri: options.schedulerUrl || this._baseURL + '/jobs/' + options.jobId + '/schedules/' + options.scheduleId + '/runs/' + options.runId,
    body: options.data
  };
  this._sendRequest(req, done);
};

Scheduler.prototype.getRunLogs = function(options, done) {
  assert(options.jobId);
  assert(options.scheduleId);

  var req = {
    method : 'GET',
    uri : this._baseURL + '/jobs/' + options.jobId + '/schedules/' + options.scheduleId + '/runs'
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.getRunLogsById = function(options, done) {
  assert(options.jobId);
  assert(options.scheduleId);
  assert(options.runId);

  var req = {
    method: 'GET',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules/' + options.scheduleId + '/runs/' + options.runId
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.fetchJobSchedules = function(options, done) {
  assert(options.jobId);

  var req = {
    method: 'GET',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules'
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.searchJobs = function(options, done) {
  var req = {
    method: 'GET',
    uri: this._baseURL + '/search/jobs',
    qs: options
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.searchSchedules = function(options, done) {
  var req = {
    method: 'GET',
    uri: this._baseURL + '/search/schedules',
    qs: options
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.deleteJob = function(options, done) {
  assert(options.jobId);

  var req = {
    method: 'DELETE',
    uri: this._baseURL + '/jobs/' + options.jobId
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.activateAllSchedules = function(options, done) {
  assert(options.jobId);
  options.activeStatus = true;

  var req = {
    method: 'POST',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules/activationStatus',
    body: {
      'activationStatus': options.activeStatus
    }
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.deactivateAllSchedules = function(options, done) {
  assert(options.jobId);
  options.activeStatus = false;

  var req = {
    method: 'POST',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules/activationStatus',
    body: {
      'activationStatus': options.activeStatus
    }
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.deleteAllJobSchedules = function(options, done) {
  assert(options.jobId);

  var req = {
    method: 'DELETE',
    uri: this._baseURL + '/jobs/' + options.jobId + '/schedules'
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.getJobCount = function(options, done) {
  if (typeof(options.activeStatus) !== 'boolean') {
    throw new TypeError('Active status value is not boolean');
  }

  var req = {
    method: 'GET',
    uri: this._baseURL + '/jobCount'
  };

  this._sendRequest(req, function(err, result) {
    if (options.activeStatus === true) {
      delete result.inactive;
      done(err, result);
    } else {
      delete result.active;
      done(err, result);
    }
  });
};

Scheduler.prototype.getJobActionLogs = function(options, done) {
  assert(options.jobId);

  var req = {
    method: 'GET',
    uri: this._baseURL + '/actionLogs' + '?jobId=' + options.jobId
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.getScheduleActionLogs = function(options, done) {
  assert(options.jobId);
  assert(options.scheduleId);

  var req = {
    method: 'GET',
    uri: this._baseURL + '/actionLogs' + '?jobId=' + options.jobId + '&scheduleId=' + options.scheduleId
  };

  this._sendRequest(req, done);
};

Scheduler.prototype.fetchAllJobs = function(options, done) {
  var req = {
    method: 'GET',
    uri: this._baseURL + '/jobs'
  };

  this._sendRequest(req, done);
};

Scheduler.prototype._sendRequest = function(req, done, checkResponse) {
  this._request(req, function (error, response, body) {
    if (error) {
      return done(error);
    }
    var checkOk;
    if (checkResponse) {
      if (typeof checkResponse === 'number') {
        checkOk = response.statusCode === checkResponse;
      } else if (util.isArray(checkResponse)) {
        checkOk = checkResponse.indexOf(response.statusCode) >= 0;
      } else {
        throw new Error('Unsupported type of checkResponse argument');
      }
    } else {
      checkOk = response.statusCode >= 200 && response.statusCode < 300;
    }
    if (!checkOk) {
      return done(responseError(response, body));
    }
    done(null, body);
  });
};

Scheduler.prototype._buildBasicAuthHeader = function(options) {
  return new Buffer(options.user + ':' + options.password).toString('base64');
};

function responseError(response, body) {
  var message = (body && body.message) || ('Status code ' + response.statusCode);
  var err = new Error(message);
  err.statusCode = response.statusCode;
  return err;
}

var debugOn = process.env.NODE_DEBUG && /\bscheduler\b/i.test(process.env.NODE_DEBUG);

Scheduler.prototype._request = function (req, done) {
  if (!debugOn) {
    return this._requestDefaults(req, done);
  }
  console.log('REQUEST:\n%s', JSON.stringify(req, null, 2)); // eslint-disable-line no-console
  return this._requestDefaults(req, function (error, response, body) {
    if (error) {
      console.error('RESPONSE: ', error); // eslint-disable-line no-console
    } else {
      var resp = {
        statusCode: response && response.statusCode,
        headers: response && response.headers,
        body: body
      };
      console.log('RESPONSE:\n%s', JSON.stringify(resp, null, 2)); // eslint-disable-line no-console
    }
    done(error, response, body);
  });
};