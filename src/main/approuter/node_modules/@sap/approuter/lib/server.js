'use strict';

var async = require('async');
var http = require('http');
var WsProxy = require('./websockets/WsProxy');

function Server(httpServer, wsServer) {
  this._httpServer = httpServer;
  this._wsServer = wsServer;
}

Server.prototype.close = function (callback) {
  async.parallel([
    this._httpServer.close.bind(this._httpServer),
    this._wsServer.close.bind(this._wsServer)
  ], callback);
};

exports.start = function (app, callback) {
  var routerConfig = app.get('mainRouterConfig');
  var httpServer = http.createServer(app);
  if (routerConfig.incomingConnectionTimeout !== undefined) {
    httpServer.timeout = routerConfig.incomingConnectionTimeout;
  }
  var wsServer = new WsProxy(app);
  wsServer.listen(httpServer);

  wsServer._server.on('error', function (err) {
    callback(err);
  });
  httpServer.listen(routerConfig.serverPort, function () {
    app.logger.info('Applicaiton router is listening on port: ' +
      httpServer.address().port);
    callback(undefined, new Server(httpServer, wsServer));
  });
};

